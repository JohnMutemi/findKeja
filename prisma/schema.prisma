generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  TENANT
  LANDLORD
  ADMIN
}

enum PropertyStatus {
  AVAILABLE
  RENTED
  PENDING
}

enum ReportType {
  SCAM
  INAPPROPRIATE
  FAKE_LISTING
  OTHER
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum PropertyType {
  APARTMENT
  HOUSE
  STUDIO
  VILLA
  TOWNHOUSE
  PENTHOUSE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  password      String
  role          UserRole       @default(TENANT)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  properties    Property[]
  sentMessages     Message[]     @relation("SentMessages")
  receivedMessages Message[]     @relation("ReceivedMessages")
  conversations    Conversation[] @relation("ConversationParticipants")
  bookings    Booking[]    @relation("TenantBookings")
}

model Property {
  id          String         @id @default(cuid())
  title       String
  description String
  price       Float
  status      PropertyStatus @default(AVAILABLE)
  type        PropertyType   @default(APARTMENT)
  bedrooms    Int
  bathrooms   Int
  area        Float         // in square meters
  address     String
  city        String
  state       String
  country     String
  latitude    Float
  longitude   Float
  images      String[]      // Array of image URLs
  amenities   String[]      // Array of amenities
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  owner       User          @relation(fields: [ownerId], references: [id])
  ownerId     String
  bookings    Booking[]
  reviews     Review[]
}

model Conversation {
  id            String    @id @default(cuid())
  participants  User[]    @relation("ConversationParticipants")
  messages      Message[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Message {
  id             String       @id @default(cuid())
  content        String
  sender         User         @relation("SentMessages", fields: [senderId], references: [id])
  senderId       String
  receiver       User         @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId     String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  createdAt      DateTime     @default(now())
}

model Report {
  id          String       @id @default(cuid())
  type        ReportType
  description String
  status      ReportStatus @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Booking {
  id          String        @id @default(cuid())
  property    Property      @relation(fields: [propertyId], references: [id])
  propertyId  String
  tenant      User          @relation("TenantBookings", fields: [tenantId], references: [id])
  tenantId    String
  startDate   DateTime
  endDate     DateTime
  status      BookingStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  review      Review?
}

model Review {
  id          String       @id @default(cuid())
  booking     Booking      @relation(fields: [bookingId], references: [id])
  bookingId   String       @unique
  rating      Int         // 1-5 stars
  comment     String
  status      ReviewStatus @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
} 